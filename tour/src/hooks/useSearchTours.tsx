import { useState, useCallback, useEffect, useMemo } from 'react';
import { useQuery } from '@tanstack/react-query';
import { 
  Tour, 
  SearchResult, 
  Filters, 
  PriceRange, 
  DURATION_MAP, 
  API_BASE_URL 
} from '../types/tours';

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –º–∞–ø–ø—ñ–Ω–≥—É duration —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
const mapDurationToServerValue = (durationIds: string[]): string | undefined => {
  if (durationIds.length === 0) return undefined;
  
  const maxDuration = Math.max(...durationIds.map(id => DURATION_MAP[id] || 7));
  return maxDuration.toString();
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ URL –ø–æ—à—É–∫—É
const buildSearchUrl = (searchQuery: string, filters: Filters): string => {
  const params = new URLSearchParams();
  
  // –î–æ–¥–∞—î–º–æ –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç
  if (searchQuery.trim()) {
    params.append("title", searchQuery.trim());
  }
  
  // –î–æ–¥–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏
  if (filters.minPrice !== undefined && filters.minPrice > 0) {
    params.append("minPrice", String(filters.minPrice));
  }
  if (filters.maxPrice !== undefined) {
    params.append("maxPrice", String(filters.maxPrice));
  }
  
  // Duration mapping
  if (filters.duration && filters.duration.length > 0) {
    const duration = mapDurationToServerValue(filters.duration);
    if (duration) {
      params.append("duration", duration);
    }
  }
  
  // Rating mapping
  if (filters.rating && filters.rating.length > 0) {
    const minRating = Math.min(...filters.rating.map(r => parseInt(r)));
    params.append("minRating", String(minRating));
    
    const maxRating = Math.max(...filters.rating.map(r => parseInt(r)));
    if (minRating !== maxRating) {
      params.append("maxRating", String(maxRating));
    }
  }
  
  // Region mapping
  if (filters.region && filters.region.length > 0) {
    params.append("region", filters.region.join(","));
  }

  return `${API_BASE_URL}/search?${params.toString()}`;
};

export const useSearchTours = () => {
  const [searchResults, setSearchResults] = useState<Tour[]>([]);
  const [isSearching, setIsSearching] = useState(false);
  const [searchError, setSearchError] = useState<string | null>(null);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ç—É—Ä—ñ–≤ –¥–ª—è fallback
  const { 
    data: allTours = [], 
    isPending: isLoadingAllTours, 
    error: allToursError,
    refetch: refetchAllTours 
  } = useQuery({
    queryKey: ["allTours"],
    queryFn: async (): Promise<Tour[]> => {
      const response = await fetch(`${API_BASE_URL}/cards`);
      if (!response.ok) {
        throw new Error(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç—É—Ä—ñ–≤: ${response.status}`);
      }
      const data = await response.json();
      return Array.isArray(data) ? data : [];
    },
    retry: 3,
    staleTime: 5 * 60 * 1000, // 5 —Ö–≤–∏–ª–∏–Ω
    gcTime: 10 * 60 * 1000,  // 10 —Ö–≤–∏–ª–∏–Ω
  });

  // –§—É–Ω–∫—Ü—ñ—è –ø–æ—à—É–∫—É —Ç—É—Ä—ñ–≤
  const searchTours = useCallback(async (searchQuery: string, filters: Filters) => {
    const searchUrl = buildSearchUrl(searchQuery, filters);
    const hasSearchParams = searchUrl.includes('?') && searchUrl.split('?')[1].length > 0;
    
    console.log("üîç –ü–æ—à—É–∫ —Ç—É—Ä—ñ–≤:", { searchQuery, filters, searchUrl, hasSearchParams });

    // –Ø–∫—â–æ –Ω–µ–º–∞—î –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –ø–æ—à—É–∫—É - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤—Å—ñ —Ç—É—Ä–∏
    if (!hasSearchParams) {
      setSearchResults([]);
      setIsSearching(false);
      setSearchError(null);
      return allTours;
    }

    try {
      setIsSearching(true);
      setSearchError(null);
      
      // –í–∏–∫–æ–Ω—É—î–º–æ –ø–æ—à—É–∫
      const searchResponse = await fetch(searchUrl);
      if (!searchResponse.ok) {
        throw new Error(`–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É: ${searchResponse.status}`);
      }
      
      const searchData: SearchResult[] = await searchResponse.json();
      console.log("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É (IDs):", searchData);

      if (Array.isArray(searchData) && searchData.length > 0) {
        // –û—Ç—Ä–∏–º—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–Ω–∞–π–¥–µ–Ω—ñ —Ç—É—Ä–∏
        const idsString = searchData.map(item => item.id).join(",");
        const detailsResponse = await fetch(`${API_BASE_URL}/tours-search-by-ids?ids=${idsString}`);
        
        if (!detailsResponse.ok) {
          throw new Error(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π: ${detailsResponse.status}`);
        }
        
        const toursDetails: Tour[] = await detailsResponse.json();
        console.log("üìã –î–µ—Ç–∞–ª—ñ –∑–Ω–∞–π–¥–µ–Ω–∏—Ö —Ç—É—Ä—ñ–≤:", toursDetails);
        
        // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –∫–ª—ñ—î–Ω—Ç—Å—å–∫–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ø–æ —Ü—ñ–Ω—ñ
        let filteredTours = toursDetails;
        if (filters.minPrice !== undefined || filters.maxPrice !== undefined) {
          filteredTours = toursDetails.filter(tour => {
            const price = tour.price || 0;
            const matchesMin = filters.minPrice === undefined || price >= filters.minPrice;
            const matchesMax = filters.maxPrice === undefined || price <= filters.maxPrice;
            return matchesMin && matchesMax;
          });
        }
        
        console.log("üîç –¢—É—Ä–∏ –ø—ñ—Å–ª—è –∫–ª—ñ—î–Ω—Ç—Å—å–∫–æ—ó —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó:", filteredTours.length);
        setSearchResults(filteredTours);
        return filteredTours;
      } else {
        console.log("üîç –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        setSearchResults([]);
        return [];
      }
    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É:", error);
      const errorMessage = error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É';
      setSearchError(errorMessage);
      setSearchResults([]);
      return [];
    } finally {
      setIsSearching(false);
    }
  }, [allTours]);

  // –û–±—á–∏—Å–ª–µ–Ω–Ω—è –¥—ñ–∞–ø–∞–∑–æ–Ω—É —Ü—ñ–Ω –∑ —É—Å—ñ—Ö —Ç—É—Ä—ñ–≤
  const priceRange = useMemo(() => {
    if (!allTours.length) return { min: 0, max: 100000 };
    
    const prices = allTours
      .map(tour => tour.price || 0)
      .filter(price => price > 0);
    
    if (prices.length === 0) return { min: 0, max: 100000 };
    
    const min = Math.min(...prices);
    const max = Math.max(...prices);
    
    // –î–æ–¥–∞—î–º–æ 20% –∑–∞–ø–∞—Å—É –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó —Ü—ñ–Ω–∏
    const maxWithBuffer = Math.ceil(max * 1.2);
    
    return { min: 0, max: maxWithBuffer };
  }, [allTours]);

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–∏—Ö —Ç—É—Ä—ñ–≤
  const getCurrentTours = useCallback((searchQuery: string, filters: Filters): Tour[] => {
    const hasActiveSearch = searchQuery.trim() || Object.keys(filters).length > 0;
    return hasActiveSearch ? searchResults : allTours;
  }, [searchResults, allTours]);

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—à—É–∫—É
  const clearSearchResults = useCallback(() => {
    setSearchResults([]);
    setSearchError(null);
    setIsSearching(false);
  }, []);

  return {
    // –î–∞–Ω—ñ
    allTours,
    searchResults,
    priceRange,
    
    // –°—Ç–∞–Ω–∏
    isLoadingAllTours,
    isSearching,
    searchError,
    allToursError,
    
    // –§—É–Ω–∫—Ü—ñ—ó
    searchTours,
    getCurrentTours,
    clearSearchResults,
    refetchAllTours,
  };
};