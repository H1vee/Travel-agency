{"ast":null,"code":"// src/index.ts\nimport { warn } from \"@heroui/shared-utils\";\nimport { filterDOMProps, isAndroid, isIOS, mergeProps } from \"@react-aria/utils\";\nimport { useFocusable } from \"@react-aria/focus\";\nimport { usePress } from \"@react-aria/interactions\";\nfunction useAriaButton(props, ref) {\n  let {\n    elementType = \"button\",\n    isDisabled,\n    onPress,\n    onPressStart,\n    onPressEnd,\n    onPressChange,\n    // @ts-ignore - undocumented\n    preventFocusOnPress,\n    // @ts-ignore - undocumented\n    allowFocusWhenDisabled,\n    // @ts-ignore\n    onClick: deprecatedOnClick,\n    href,\n    target,\n    rel,\n    type = \"button\",\n    allowTextSelectionOnPress,\n    role\n  } = props;\n  let additionalProps;\n  if (elementType === \"button\") {\n    additionalProps = {\n      type,\n      disabled: isDisabled\n    };\n  } else {\n    additionalProps = {\n      role: \"button\",\n      tabIndex: isDisabled ? void 0 : 0,\n      href: elementType === \"a\" && !isDisabled ? href : void 0,\n      target: elementType === \"a\" ? target : void 0,\n      type: elementType === \"input\" ? type : void 0,\n      disabled: elementType === \"input\" ? isDisabled : void 0,\n      \"aria-disabled\": !isDisabled || elementType === \"input\" ? void 0 : isDisabled,\n      rel: elementType === \"a\" ? rel : void 0\n    };\n  }\n  let isMobile = isIOS() || isAndroid();\n  if (deprecatedOnClick && typeof deprecatedOnClick === \"function\" &&\n  // bypass since onClick is passed from <Link as={Button} /> internally\n  role !== \"link\" &&\n  // bypass since onClick is passed from useDisclosure's `getButtonProps` internally\n  !(props.hasOwnProperty(\"aria-expanded\") && props.hasOwnProperty(\"aria-controls\"))) {\n    warn(\"onClick is deprecated, please use onPress instead. See: https://github.com/heroui-inc/heroui/issues/4292\", \"useButton\");\n  }\n  const handlePress = e => {\n    if (isMobile) {\n      deprecatedOnClick == null ? void 0 : deprecatedOnClick(e);\n    }\n    onPress == null ? void 0 : onPress(e);\n  };\n  let {\n    pressProps,\n    isPressed\n  } = usePress({\n    onPressStart,\n    onPressEnd,\n    onPressChange,\n    onPress: handlePress,\n    isDisabled,\n    preventFocusOnPress,\n    allowTextSelectionOnPress,\n    ref\n  });\n  let {\n    focusableProps\n  } = useFocusable(props, ref);\n  if (allowFocusWhenDisabled) {\n    focusableProps.tabIndex = isDisabled ? -1 : focusableProps.tabIndex;\n  }\n  let buttonProps = mergeProps(focusableProps, pressProps, filterDOMProps(props, {\n    labelable: true\n  }));\n  return {\n    isPressed,\n    // Used to indicate press state for visual\n    buttonProps: mergeProps(additionalProps, buttonProps, {\n      \"aria-haspopup\": props[\"aria-haspopup\"],\n      \"aria-expanded\": props[\"aria-expanded\"],\n      \"aria-controls\": props[\"aria-controls\"],\n      \"aria-pressed\": props[\"aria-pressed\"],\n      onClick: e => {\n        if (type === \"button\" && isMobile) {\n          return;\n        }\n        deprecatedOnClick == null ? void 0 : deprecatedOnClick(e);\n      }\n    })\n  };\n}\nexport { useAriaButton };","map":{"version":3,"names":["warn","filterDOMProps","isAndroid","isIOS","mergeProps","useFocusable","usePress","useAriaButton","props","ref","elementType","isDisabled","onPress","onPressStart","onPressEnd","onPressChange","preventFocusOnPress","allowFocusWhenDisabled","onClick","deprecatedOnClick","href","target","rel","type","allowTextSelectionOnPress","role","additionalProps","disabled","tabIndex","isMobile","hasOwnProperty","handlePress","e","pressProps","isPressed","focusableProps","buttonProps","labelable"],"sources":["/media/Akunamatata/Course Project/tour/node_modules/@heroui/use-aria-button/dist/index.mjs"],"sourcesContent":["// src/index.ts\nimport { warn } from \"@heroui/shared-utils\";\nimport { filterDOMProps, isAndroid, isIOS, mergeProps } from \"@react-aria/utils\";\nimport { useFocusable } from \"@react-aria/focus\";\nimport { usePress } from \"@react-aria/interactions\";\nfunction useAriaButton(props, ref) {\n  let {\n    elementType = \"button\",\n    isDisabled,\n    onPress,\n    onPressStart,\n    onPressEnd,\n    onPressChange,\n    // @ts-ignore - undocumented\n    preventFocusOnPress,\n    // @ts-ignore - undocumented\n    allowFocusWhenDisabled,\n    // @ts-ignore\n    onClick: deprecatedOnClick,\n    href,\n    target,\n    rel,\n    type = \"button\",\n    allowTextSelectionOnPress,\n    role\n  } = props;\n  let additionalProps;\n  if (elementType === \"button\") {\n    additionalProps = {\n      type,\n      disabled: isDisabled\n    };\n  } else {\n    additionalProps = {\n      role: \"button\",\n      tabIndex: isDisabled ? void 0 : 0,\n      href: elementType === \"a\" && !isDisabled ? href : void 0,\n      target: elementType === \"a\" ? target : void 0,\n      type: elementType === \"input\" ? type : void 0,\n      disabled: elementType === \"input\" ? isDisabled : void 0,\n      \"aria-disabled\": !isDisabled || elementType === \"input\" ? void 0 : isDisabled,\n      rel: elementType === \"a\" ? rel : void 0\n    };\n  }\n  let isMobile = isIOS() || isAndroid();\n  if (deprecatedOnClick && typeof deprecatedOnClick === \"function\" && // bypass since onClick is passed from <Link as={Button} /> internally\n  role !== \"link\" && // bypass since onClick is passed from useDisclosure's `getButtonProps` internally\n  !(props.hasOwnProperty(\"aria-expanded\") && props.hasOwnProperty(\"aria-controls\"))) {\n    warn(\n      \"onClick is deprecated, please use onPress instead. See: https://github.com/heroui-inc/heroui/issues/4292\",\n      \"useButton\"\n    );\n  }\n  const handlePress = (e) => {\n    if (isMobile) {\n      deprecatedOnClick == null ? void 0 : deprecatedOnClick(e);\n    }\n    onPress == null ? void 0 : onPress(e);\n  };\n  let { pressProps, isPressed } = usePress({\n    onPressStart,\n    onPressEnd,\n    onPressChange,\n    onPress: handlePress,\n    isDisabled,\n    preventFocusOnPress,\n    allowTextSelectionOnPress,\n    ref\n  });\n  let { focusableProps } = useFocusable(props, ref);\n  if (allowFocusWhenDisabled) {\n    focusableProps.tabIndex = isDisabled ? -1 : focusableProps.tabIndex;\n  }\n  let buttonProps = mergeProps(\n    focusableProps,\n    pressProps,\n    filterDOMProps(props, { labelable: true })\n  );\n  return {\n    isPressed,\n    // Used to indicate press state for visual\n    buttonProps: mergeProps(additionalProps, buttonProps, {\n      \"aria-haspopup\": props[\"aria-haspopup\"],\n      \"aria-expanded\": props[\"aria-expanded\"],\n      \"aria-controls\": props[\"aria-controls\"],\n      \"aria-pressed\": props[\"aria-pressed\"],\n      onClick: (e) => {\n        if (type === \"button\" && isMobile) {\n          return;\n        }\n        deprecatedOnClick == null ? void 0 : deprecatedOnClick(e);\n      }\n    })\n  };\n}\nexport {\n  useAriaButton\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}